## Ansible playbook to install OpenVPN + GUI on a Debian-based system

- name: Install shadowsocks-libev
  become: yes
  
  # ============================================================================
  vars:
    host_group: localhost
    # Your 'hosts', can be a group or a single host, e.g. 'localhost' if
    # you want to run the playbook on the local machine.

    ovpn_ui_username: admin
    ovpn_ui_password: PASSWORD_HERE
    # Will be used to access the openvpn-ui.

    python3_venv_path: /usr/bin/python3-venv
    # Virtual environment for Python3. Just leave it as is.

    ovpn_port: '1194'
    ovpn_ui_port: '8089'
    # OpenVPN and OpenVPN UI ports.

    ovpn_trust_subnet: '10.0.70/24'
    # Trusted subnet, from which OpenVPN server will assign IPs to trusted 
    # clients (default subnet for all clients) 

    ovpn_guest_subnet: '10.0.71/24'
    # Guests subnet for clients with internet access only

    ovpn_home_subnet: '192.168.88/24'
    # Subnet where the VPN server is located, thru which you get internet 
    # access to the clients with MASQUERADE

  # ============================================================================

  hosts: "{{ host_group }}"
  tasks:

    - name: Update system
      apt:
        update_cache: yes
        upgrade: dist

    - name: Ensure Docker is installed
      become: yes
      apt:
        name: docker.io
        state: present
        
    - name: Start Docker
      become: yes
      service:
        name: docker
        state: started
        enabled: yes

    - name: Ensure python3 is installed
      become: yes
      apt:
        name: python3
        state: present

    - name: Ensure pip3 is installed
      become: yes
      apt:
        name: python3-pip
        state: present

    - name: Create a virtual environment and install Docker Python library
      become: yes
      block:
        - name: Ensure python3-venv is installed
          apt:
            name: python3-venv
            state: present
    
        - name: Create a virtual environment
          command: python3 -m venv {{ python3_venv_path }}
          args:
            creates: "{{ python3_venv_path }}"
    
        - name: Install Docker Python library in the virtual environment
          command: "{{ python3_venv_path }}/bin/pip install docker"

    - name: Install openvpn
      command: docker pull d3vilh/openvpn-server:latest

    - name: Deploy openvpn
      become: yes
      vars:
        ansible_python_interpreter: "{{ python3_venv_path }}/bin/python3"
      docker_container:
        name: openvpn
        image: awalach/openvpn
        privileged: true
        ports: 
          - "{{ ovpn_port }}:1194/udp"
        env:
          TRUST_SUB: '{{ ovpn_trust_subnet }}'
          GUEST_SUB: '{{ ovpn_guest_subnet }}'
          HOME_SUB: '{{ ovpn_home_subnet }}'
        volumes:
           - ./openvpn-data/openvpn:/etc/openvpn
        capabilities:
          - NET_ADMIN
          - SYS_PTRACE
        restart_policy: always
        container_default_behavior: no_defaults

    - name: Install openvpn-ui
      command: docker pull d3vilh/openvpn-ui:latest

    - name: Deploy openvpn-ui
      become: yes
      vars:
        ansible_python_interpreter: "{{ python3_venv_path }}/bin/python3"
      docker_container:
        name: openvpn-ui
        image: vuonglequoc/openvpn-web-ui
        env:
          OPENVPN_ADMIN_USERNAME: "{{ ovpn_ui_username }}"
          OPENVPN_ADMIN_PASSWORD: "{{ ovpn_ui_password }}"
          SERVER_NAME: Server
          SERVER_EMAIL: mail@example.com
          SERVER_COUNTRY: "-"
          SERVER_PROVINCE: "-"
          SERVER_CITY: "-"
          SERVER_ORG: "-"
          SERVER_OU: "Community"
          SERVER_CN: "Server"
        privileged: true
        ports:
          - "{{ ovpn_ui_port }}:8080/tcp"
        volumes:
          - ./openvpn-data/openvpn:/etc/openvpn
          - ./openvpn-data/ca_server:/etc/ca_server
          - ./openvpn-data/db:/opt/openvpn-gui/db
        restart_policy: always
        container_default_behavior: no_defaults

    - name: Clear apt cache
      apt:
        autoclean: yes

    - name: Print data to access openvpn
      debug:
        msg: "To access openvpn, use the following data: IP: {{ ansible_host }}, Port: {{ ovpn_port }}"

    - name: Print data to access openvpn-ui
      debug:
        msg: "To access openvpn-ui, use the following data: http://{{ ansible_host }}:{{ ovpn_ui_port }} with username: {{ ovpn_ui_username }}"